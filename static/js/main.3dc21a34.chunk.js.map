{"version":3,"sources":["LocationModel.ts","MapBox.tsx","App.tsx","index.tsx"],"names":["locationModel","location$","BehaviorSubject","MapBox","ref","useRef","useEffect","current","mbox","mapboxgl","Map","container","style","center","zoom","on","subscribe","coordinates","getLayer","removeLayer","getSource","removeSource","addSource","addLayer","className","accessToken","fetchData","ajax","pipe","map","res","activities","response","Object","keys","reverse","date","Activity","activity","Date","toLocaleString","locations","loc","i","key","toLocaleTimeString","speed","toFixed","App","useRxAjax","req","useState","expandedDate","setExpandedDate","Fragment","onClick","next","_","longitude","latitude","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAOaA,EAAgB,IAJ7B,sCACWC,UAAY,IAAIC,kBAAoC,OCGxD,SAASC,IACZ,IAAMC,EAAMC,iBAAuB,MAuDnC,OArDAC,qBAAU,WACN,GAAIF,EAAIG,QAAS,CACb,IAAMC,EAAO,IAAIC,IAASC,IAAI,CAC1BC,UAAWP,EAAIG,QACfK,MAAO,kCACPC,OAAQ,EAAE,kBAAmB,mBAC7BC,KAAM,KAGVN,EAAKO,GAAG,QAAQ,WAEZf,EAAcC,UAAUe,WAAU,SAACC,GAE3BT,EAAKU,SAAS,UACdV,EAAKW,YAAY,SAGjBX,EAAKY,UAAU,UACfZ,EAAKa,aAAa,SAGdJ,IACAT,EAAKc,UAAU,QAAS,CACpB,KAAQ,UACR,KAAQ,CACR,KAAQ,UACR,WAAc,GACd,SAAY,CACZ,KAAQ,aACR,YAAeL,MAInBT,EAAKe,SAAS,CACV,GAAM,QACN,KAAQ,OACR,OAAU,QACV,OAAU,CACV,YAAa,QACb,WAAY,SAEZ,MAAS,CACT,aAAc,UACd,aAAc,eAQvC,IAGC,yBAAKnB,IAAKA,EAAKoB,UAAU,iBA5DjCf,IAASgB,YAAc,6FCgBvB,IAAMC,EAAY,WAChB,OAAOC,YAAK,2DACTC,KAAKC,aAAI,SAAAC,GACR,IAAMC,EAAcD,EAAIE,SAGxB,OAFcC,OAAOC,KAAKH,GAAYI,UAEzBN,KAAI,SAAAO,GAAI,OAAIL,EAAWK,WAS1C,SAASC,EAAT,GAA8C,IAA3BC,EAA0B,EAA1BA,SACjB,OAAO,yBAAKd,UAAU,aACtB,6BAAM,IAAIe,KAAKD,EAASF,MAAMI,kBAC7BF,EAASG,UAAUZ,KAAI,SAACa,EAAKC,GAAN,OACtB,yBAAKnB,UAAU,MAAMoB,IAAKD,GACxB,6BAAM,IAAIJ,KAAKG,EAAIN,MAAMS,sBACzB,6BAAMH,EAAII,MAAMC,QAAQ,GAAxB,IAA6B,YAgCpBC,MA1Bf,WAAgB,IAAD,IACMC,oBAAUvB,GADhB,mBACNI,EADM,KACDoB,EADC,OAE2BC,oBAAkB,GAF7C,mBAENC,EAFM,KAEQC,EAFR,KAQb,OAJA/C,qBAAU,WACR4C,EAAI,MACH,IAGD,yBAAK1B,UAAU,OACb,yBAAKA,UAAU,QACdM,IAAG,UAAIA,EAAIA,WAAR,aAAI,EAASD,KAAI,SAAAS,GAAQ,OAC7B,kBAAC,IAAMgB,SAAP,CAAgBV,IAAKN,EAASF,MAC5B,yBAAKZ,UAAU,YAAY+B,QAAS,WAClCF,EAAgBf,EAASF,MACzBpC,EAAcC,UAAUuD,KAAKlB,EAASG,UAAUZ,KAAI,SAAA4B,GAAC,MAAI,CAACA,EAAEC,UAAWD,EAAEE,gBACrE,IAAIpB,KAAKD,EAASF,MAAMI,kBAC7BY,IAAiBd,EAASF,MAAQ,kBAACC,EAAD,CAAUO,IAAKN,EAASF,KAAME,SAAUA,UAI7E,yBAAKd,UAAU,SAAQ,kBAACrB,EAAD,SC/D7ByD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.3dc21a34.chunk.js","sourcesContent":["import {Coordinate} from './MapBox'\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject'\n\nexport class LocationModel {\n    public location$ = new BehaviorSubject<Coordinate[]| null>(null)\n}\n\nexport const locationModel = new LocationModel();","import React, { useRef, useEffect } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport {locationModel} from './LocationModel';\n \nmapboxgl.accessToken = 'pk.eyJ1IjoiZGRvcm9uaW4iLCJhIjoiY2p6em1iZWJ2MGN3NzNwcDczNW1oZ2k5NSJ9.UJrYnECy1aixaoHgvd_jTg';\n\nexport type Coordinate = [number, number];\nexport function MapBox() {\n    const ref = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (ref.current) {\n            const mbox = new mapboxgl.Map({\n                container: ref.current,\n                style: 'mapbox://styles/mapbox/dark-v10', // stylesheet location\n                center: [-73.97423377316557, 40.75416764191794], // starting position [lng, lat]\n                zoom: 14 // starting zoom\n            });\n\n            mbox.on('load', function() {\n\n                locationModel.location$.subscribe((coordinates) => {\n\n                    if (mbox.getLayer('route')) {\n                        mbox.removeLayer('route')\n                    }\n\n                    if (mbox.getSource('route')) {\n                        mbox.removeSource('route')\n                    }\n\n                        if (coordinates) {\n                            mbox.addSource('route', {\n                                'type': 'geojson',\n                                'data': {\n                                'type': 'Feature',\n                                'properties': {},\n                                'geometry': {\n                                'type': 'LineString',\n                                'coordinates': coordinates}\n                                }\n                            });\n    \n                            mbox.addLayer({\n                                'id': 'route',\n                                'type': 'line',\n                                'source': 'route',\n                                'layout': {\n                                'line-join': 'round',\n                                'line-cap': 'round'\n                                },\n                                'paint': {\n                                'line-color': '#06d80e',\n                                'line-width': 2\n                                }\n                            });\n                        }\n                    \n                });\n            });\n        }\n    }, []);\n   \n    return (\n        <div ref={ref} className=\"mapContainer\"/>\n    )\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport { useRxAjax } from '@reonomy/reactive-hooks';\nimport { ajax } from 'rxjs/ajax';\nimport { map } from 'rxjs/operators'\nimport { MapBox, Coordinate } from './MapBox'\nimport { locationModel } from './LocationModel';\n\ninterface Activity {\n  date: number\n  locations: CLLocation[]\n}\n\ninterface CLLocation {\n  date: number,\n  latitude: number,\n  longitude: number,\n  speed: number\n}\n\nconst fetchData = () => {\n  return ajax('https://solerunner-alpha.firebaseio.com/activities.json')\n    .pipe(map(res => {\n      const activities = (res.response as {[k: string]: Activity})\n      const dates = Object.keys(activities).reverse();\n\n      return dates.map(date => activities[date]);\n    }));\n}\n\n\ninterface ActivityProps {\n  activity: Activity\n}\n\nfunction Activity({activity}: ActivityProps) {\n  return <div className=\"container\">\n  <div>{new Date(activity.date).toLocaleString()}</div>\n  {activity.locations.map((loc, i) => \n    <div className=\"row\" key={i}>\n      <div>{new Date(loc.date).toLocaleTimeString()}</div>\n      <div>{loc.speed.toFixed(1)} {'m/s'}</div>\n    </div>\n  )}\n  </div>\n}\n\nfunction App() {\n  const [res, req] = useRxAjax(fetchData);\n  const [expandedDate, setExpandedDate] = useState<number>(-1);\n\n  useEffect(() => {\n    req({});\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <div className=\"left\">\n      {res && res.res?.map(activity => \n      <React.Fragment key={activity.date}>\n        <div className=\"clickable\" onClick={() => {\n          setExpandedDate(activity.date)\n          locationModel.location$.next(activity.locations.map(_ => [_.longitude, _.latitude]));\n          }}>{new Date(activity.date).toLocaleString()}</div>\n        {expandedDate === activity.date && <Activity key={activity.date} activity={activity}/>}\n        </React.Fragment>\n      )}\n      </div>\n      <div className=\"right\"><MapBox/></div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}